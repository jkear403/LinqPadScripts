<Query Kind="VBProgram" />

Sub Main
	Dim base64String As String = ""
	Dim filePath As String = "C:\Base\Workflows - Local\Tests\RunSQLWindowsAuth.twf"

	Dim saveToFile As Boolean = False
	If saveToFile Then
		File.WriteAllText(filePath, ConvertFromBase64String(base64String))
	Else
		Console.WriteLine(ConvertToBase64String(File.ReadAllText(filePath)))
	End If
End Sub

Public Function ConvertToBase64String(ByVal str As String) As String
	Dim strBytes As Byte() = System.Text.Encoding.UTF8.GetBytes(str)
	Return Convert.ToBase64String(strBytes)
End Function

Public Function ConvertFromBase64String(ByVal str As String) As String
	Dim strBytes As Byte() = Convert.FromBase64String(str)
	Return System.Text.Encoding.UTF8.GetString(strBytes)
End Function
' Define other methods and classes here
